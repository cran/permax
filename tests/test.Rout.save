
R : Copyright 2002, The R Development Core Team
Version 1.5.1  (2002-06-17)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type `license()' or `licence()' for distribution details.

R is a collaborative project with many contributors.
Type `contributors()' for more information.

Type `demo()' for some demos, `help()' for on-line help, or
`help.start()' for a HTML browser interface to help.
Type `q()' to quit R.

> # attach the permax library before sourcing this file
> #library(permax,lib.loc='/usr/stats/gray/chips')
> #library(permax,lib.loc='~/R')
> library(permax)
> #dyn.load('../src/permax.so')
> #source('../R/permax.R')
> #generate make believe data
> set.seed(1292)
> ngenes <- 1000
> m1 <- rnorm(ngenes,4,1)
> m2 <- rnorm(ngenes,4,1)
> exp1 <- cbind(matrix(exp(rnorm(ngenes*5,m1,1)),nrow=ngenes),
+                matrix(exp(rnorm(ngenes*10,m2,1)),nrow=ngenes))
> exp1[exp1<20] <- 20
> sub <- exp1>20 & exp1<150
> exp1[sub] <- ifelse(runif(length(sub[sub]))<.5,20,exp1[sub])
> dimnames(exp1) <- list(paste('x',1:ngenes,sep=''),
+                        paste('sample',1:ncol(exp1),sep=''))
> exp1 <- round(exp1)
> print(table(exp1<=20))

FALSE  TRUE 
 7453  7547 
> n1 <- apply(exp1>20,1,sum)
> print(table(n1))
n1
  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
  6  15  43  41  53  84 121 140 139 114  91  64  44  25  14   6 
> # permax
> uu <- permax(exp1,1:5)
statistics will be computed for all 3003 combinations
> print(uus1 <- summary(uu))
Call:
permax(data = exp1, ig1 = 1:5)
Summary of the Null Permutation Distribution of # Positives:
          nl      prop.nl      prop.1l        ave.l           nr      prop.nr 
5.000000e+01 3.330003e-04 6.879787e-01 1.570097e+00 5.000000e+01 3.330003e-04 
     prop.1r        ave.r 
3.593073e-01 5.487846e-01 
        stat  p.lower    m1    m2      s1     s2 np1 np2    mdiff    mrat
x149 -10.797 0.000999 2.996 6.805 0.00000 0.7742   0  10  -882.63 0.02216
x266 -10.381 0.000999 2.996 6.027 0.00000 0.6407   0  10  -394.44 0.04826
x464  -9.143 0.002664 2.996 6.418 0.00000 0.8213   0  10  -592.63 0.03265
x296  -9.121 0.002664 3.313 7.053 0.65829 0.7855   2  10 -1129.34 0.02375
x606  -8.967 0.002664 2.996 5.684 0.00000 0.6579   0  10  -274.20 0.06798
x762  -8.659 0.003330 3.217 5.708 0.21250 0.6151   3  10  -276.25 0.08284
x431  -7.395 0.004662 3.139 6.071 0.32103 0.8430   1  10  -409.83 0.05333
x6    -6.281 0.011322 3.275 5.965 0.59780 0.8510   2  10  -363.08 0.06789
x622  -6.177 0.013320 3.346 6.309 0.47962 1.0029   2  10  -521.19 0.05165
x39   -5.301 0.033966 2.996 5.595 0.00000 1.0759   0   9  -249.04 0.07434
x197  -5.123 0.045288 3.096 6.220 0.22395 1.3296   1  10  -480.54 0.04398
x725  -4.894 0.062604 3.891 6.646 1.17591 0.9544   3  10  -720.48 0.06362
x884  -4.870 0.066267 2.996 5.336 0.00000 1.0544   0   9  -187.67 0.09631
x798  -4.820 0.070929 3.015 5.282 0.04262 1.0319   1   9  -176.47 0.10355
x786  -4.818 0.071928 2.996 5.533 0.00000 1.1556   0   9  -232.94 0.07907
x867  -4.700 0.080586 3.194 6.208 0.39226 1.3828   2   9  -472.49 0.04908
x809  -4.545 0.095238 3.070 5.436 0.16617 1.1369   1   9  -208.02 0.09384
x986  -4.298 0.152847 3.083 5.089 0.19599 1.0158   1   9  -140.47 0.13452
x504  -4.244 0.160839 3.198 5.659 0.29353 1.2573   2   9  -262.50 0.08535
x524  -4.113 0.196137 3.434 5.491 0.61631 1.0179   2   9  -211.61 0.12776
x679  -4.053 0.206793 3.356 6.057 0.80501 1.3602   1   9  -398.43 0.06712
x304  -4.013 0.220779 2.996 5.244 0.00000 1.2294   0   9  -169.50 0.10554
x157  -3.958 0.230436 3.389 5.486 0.55610 1.1018   2   9  -211.61 0.12286
x589  -3.924 0.237762 2.996 4.715 0.00000 0.9610   0   9   -91.55 0.17929
x474  -3.915 0.239760 3.263 5.663 0.59703 1.2854   1  10  -261.99 0.09066
       stat  p.upper    m1    m2     s1      s2 np1 np2   mdiff   mrat
x123 36.048 0.000333 5.941 2.996 0.2689 0.00000   5   0  360.33 19.017
x20  23.766 0.000666 5.745 2.996 0.3807 0.00000   5   0  292.54 15.627
x428 18.140 0.000666 5.523 3.010 0.4511 0.04420   5   1  230.02 12.342
x720 16.913 0.000666 6.776 2.996 0.7357 0.00000   5   0  856.66 43.833
x954 16.195 0.000999 6.498 2.996 0.7119 0.00000   5   0  644.03 33.202
x610 13.366 0.003663 4.529 3.022 0.3496 0.08297   5   1   72.13  4.513
x616 12.855 0.003663 5.166 3.001 0.5539 0.01543   5   1  155.08  8.717
x664 11.303 0.006327 6.246 3.057 0.8814 0.19454   5   1  494.47 24.248
x879 10.961 0.007326 6.641 3.010 1.0884 0.04420   5   1  745.57 37.761
x49  10.945 0.007326 5.517 3.155 0.4969 0.33844   5   2  225.41 10.614
x618 10.582 0.008658 6.550 3.157 0.8874 0.38083   5   3  675.87 29.756
x238 10.294 0.012654 6.483 3.136 0.9459 0.33364   5   2  630.93 28.422
x804 10.241 0.012654 6.451 3.054 1.0627 0.16679   5   2  611.89 29.872
x58   9.876 0.013986 5.311 3.086 0.6354 0.25486   5   2  180.74  9.254
x148  9.373 0.019314 5.025 3.034 0.6809 0.10580   5   2  131.44  7.324
x424  9.259 0.020979 6.023 3.057 1.0132 0.19454   5   1  391.68 19.416
x27   9.001 0.024975 6.524 2.996 1.2903 0.00000   5   0  661.44 34.072
x705  8.937 0.025308 6.628 3.001 1.3358 0.01543   5   1  736.15 37.628
x928  8.783 0.027306 5.360 3.018 0.8712 0.07056   5   1  192.27 10.401
x183  8.746 0.028305 6.056 3.346 0.6310 0.53426   5   4  398.44 15.034
x996  8.628 0.030636 5.566 3.052 0.9216 0.17697   5   1  240.14 12.353
x186  8.558 0.031302 4.512 3.042 0.5367 0.11801   5   2   70.13  4.347
x909  8.371 0.036630 5.900 3.115 0.9645 0.34536   5   2  342.35 16.191
x568  7.893 0.045954 7.156 3.312 1.3023 0.62346   5   3 1254.60 46.740
x136  7.586 0.050949 5.007 2.996 0.8725 0.00000   5   0  129.40  7.470
> # following should give same results
> exp2 <- exp1[,c(1,2,7,10,3,8,11,6,5,9,12,15,13,14,4)]
> exp3 <- cbind(ngenes:1,exp1,1:ngenes)
> exp4 <- cbind(ngenes:1,exp2,1:ngenes)
> uu2 <- permax(exp2,c(1,2,5,9,15))
statistics will be computed for all 3003 combinations
> uus2 <- summary(uu2)
> uu3 <- permax(exp3,2:6,ig2=7:16)
statistics will be computed for all 3003 combinations
> uus3 <- summary(uu3)
> uu4 <- permax(exp4,c(1,2,5,9,15)+1,ig2=c(4,5,7,8,9,11,12,13,14,15))
statistics will be computed for all 3003 combinations
> uus4 <- summary(uu4)
> range(as.matrix(uus2$objectl)-as.matrix(uus1$objectl))
[1] -8.881784e-16  9.094947e-13
> range(as.matrix(uus3$objectl)-as.matrix(uus1$objectl))
[1] 0 0
> range(as.matrix(uus4$objectl)-as.matrix(uus1$objectl))
[1] -8.881784e-16  9.094947e-13
> range(as.matrix(uus2$objectr)-as.matrix(uus1$objectr))
[1] -1.136868e-12  6.821210e-13
> range(as.matrix(uus3$objectr)-as.matrix(uus1$objectr))
[1] 0 0
> range(as.matrix(uus4$objectr)-as.matrix(uus1$objectr))
[1] -1.136868e-12  6.821210e-13
> 
> postscript(file='figs.ps')
> par(cex=.7,mar=c(6,6,2,2))
> plot(uu,exp1,ig1=1:5)
> plot(uu,exp1,ig1=1:5,nr=40,nl=0)
> plot.expr(exp1[1:20,])
> dev.off()
null device 
          1 
> 
> u4 <- permax(exp1,1:5, nperm=1000)
> print(summary(u4))
Call:
permax(data = exp1, ig1 = 1:5, nperm = 1000)
Summary of the Null Permutation Distribution of # Positives:
     nl prop.nl prop.1l   ave.l      nr prop.nr prop.1r   ave.r 
 50.000   0.001   0.700   1.606  50.000   0.001   0.357   0.557 
        stat p.lower    m1    m2      s1     s2 np1 np2    mdiff    mrat
x149 -10.797   0.002 2.996 6.805 0.00000 0.7742   0  10  -882.63 0.02216
x266 -10.381   0.002 2.996 6.027 0.00000 0.6407   0  10  -394.44 0.04826
x464  -9.143   0.005 2.996 6.418 0.00000 0.8213   0  10  -592.63 0.03265
x296  -9.121   0.005 3.313 7.053 0.65829 0.7855   2  10 -1129.34 0.02375
x606  -8.967   0.005 2.996 5.684 0.00000 0.6579   0  10  -274.20 0.06798
x762  -8.659   0.005 3.217 5.708 0.21250 0.6151   3  10  -276.25 0.08284
x431  -7.395   0.006 3.139 6.071 0.32103 0.8430   1  10  -409.83 0.05333
x6    -6.281   0.013 3.275 5.965 0.59780 0.8510   2  10  -363.08 0.06789
x622  -6.177   0.014 3.346 6.309 0.47962 1.0029   2  10  -521.19 0.05165
x39   -5.301   0.032 2.996 5.595 0.00000 1.0759   0   9  -249.04 0.07434
x197  -5.123   0.045 3.096 6.220 0.22395 1.3296   1  10  -480.54 0.04398
x725  -4.894   0.060 3.891 6.646 1.17591 0.9544   3  10  -720.48 0.06362
x884  -4.870   0.063 2.996 5.336 0.00000 1.0544   0   9  -187.67 0.09631
x798  -4.820   0.070 3.015 5.282 0.04262 1.0319   1   9  -176.47 0.10355
x786  -4.818   0.073 2.996 5.533 0.00000 1.1556   0   9  -232.94 0.07907
x867  -4.700   0.083 3.194 6.208 0.39226 1.3828   2   9  -472.49 0.04908
x809  -4.545   0.094 3.070 5.436 0.16617 1.1369   1   9  -208.02 0.09384
x986  -4.298   0.156 3.083 5.089 0.19599 1.0158   1   9  -140.47 0.13452
x504  -4.244   0.161 3.198 5.659 0.29353 1.2573   2   9  -262.50 0.08535
x524  -4.113   0.204 3.434 5.491 0.61631 1.0179   2   9  -211.61 0.12776
x679  -4.053   0.214 3.356 6.057 0.80501 1.3602   1   9  -398.43 0.06712
x304  -4.013   0.229 2.996 5.244 0.00000 1.2294   0   9  -169.50 0.10554
x157  -3.958   0.232 3.389 5.486 0.55610 1.1018   2   9  -211.61 0.12286
x589  -3.924   0.241 2.996 4.715 0.00000 0.9610   0   9   -91.55 0.17929
x474  -3.915   0.243 3.263 5.663 0.59703 1.2854   1  10  -261.99 0.09066
       stat p.upper    m1    m2     s1      s2 np1 np2   mdiff   mrat
x123 36.048   0.001 5.941 2.996 0.2689 0.00000   5   0  360.33 19.017
x20  23.766   0.002 5.745 2.996 0.3807 0.00000   5   0  292.54 15.627
x428 18.140   0.002 5.523 3.010 0.4511 0.04420   5   1  230.02 12.342
x720 16.913   0.002 6.776 2.996 0.7357 0.00000   5   0  856.66 43.833
x954 16.195   0.003 6.498 2.996 0.7119 0.00000   5   0  644.03 33.202
x610 13.366   0.010 4.529 3.022 0.3496 0.08297   5   1   72.13  4.513
x616 12.855   0.010 5.166 3.001 0.5539 0.01543   5   1  155.08  8.717
x664 11.303   0.016 6.246 3.057 0.8814 0.19454   5   1  494.47 24.248
x879 10.961   0.016 6.641 3.010 1.0884 0.04420   5   1  745.57 37.761
x49  10.945   0.016 5.517 3.155 0.4969 0.33844   5   2  225.41 10.614
x618 10.582   0.018 6.550 3.157 0.8874 0.38083   5   3  675.87 29.756
x238 10.294   0.021 6.483 3.136 0.9459 0.33364   5   2  630.93 28.422
x804 10.241   0.021 6.451 3.054 1.0627 0.16679   5   2  611.89 29.872
x58   9.876   0.022 5.311 3.086 0.6354 0.25486   5   2  180.74  9.254
x148  9.373   0.034 5.025 3.034 0.6809 0.10580   5   2  131.44  7.324
x424  9.259   0.036 6.023 3.057 1.0132 0.19454   5   1  391.68 19.416
x27   9.001   0.039 6.524 2.996 1.2903 0.00000   5   0  661.44 34.072
x705  8.937   0.039 6.628 3.001 1.3358 0.01543   5   1  736.15 37.628
x928  8.783   0.039 5.360 3.018 0.8712 0.07056   5   1  192.27 10.401
x183  8.746   0.040 6.056 3.346 0.6310 0.53426   5   4  398.44 15.034
x996  8.628   0.043 5.566 3.052 0.9216 0.17697   5   1  240.14 12.353
x186  8.558   0.044 4.512 3.042 0.5367 0.11801   5   2   70.13  4.347
x909  8.371   0.050 5.900 3.115 0.9645 0.34536   5   2  342.35 16.191
x568  7.893   0.056 7.156 3.312 1.3023 0.62346   5   3 1254.60 46.740
x136  7.586   0.062 5.007 2.996 0.8725 0.00000   5   0  129.40  7.470
> print(attr(u4,'seed.start'))
[1]  4569 21327 14339
> print(attr(u4,'seed.end'))
[1] 21276  6928  8887
> 
> #clustered
> clustind <- c(1,1,2,2,3,1,1,1,1,2,2,2,2,3,3)
> uuc <- permax(exp1,1:5,nperm=5000,cluster=clustind,WHseed=attr(u4,'seed.end'))
> summary(uuc,nl=5,nr=5) 
Call:
permax(data = exp1, ig1 = 1:5, nperm = 5000, WHseed = attr(u4, 
    "seed.end"), cluster = clustind)
Summary of the Null Permutation Distribution of # Positives:
     nl prop.nl prop.1l   ave.l      nr prop.nr prop.1r   ave.r 
50.0000  0.0010  0.7300  1.8220 50.0000  0.0010  0.3620  0.6038 
        stat p.lower    m1    m2     s1     s2 np1 np2   mdiff    mrat
x149 -10.797  0.0028 2.996 6.805 0.0000 0.7742   0  10  -882.6 0.02216
x266 -10.381  0.0028 2.996 6.027 0.0000 0.6407   0  10  -394.4 0.04826
x464  -9.143  0.0046 2.996 6.418 0.0000 0.8213   0  10  -592.6 0.03265
x296  -9.121  0.0046 3.313 7.053 0.6583 0.7855   2  10 -1129.3 0.02375
x606  -8.967  0.0046 2.996 5.684 0.0000 0.6579   0  10  -274.2 0.06798
      stat p.upper    m1    m2     s1     s2 np1 np2 mdiff  mrat
x123 36.05   0.001 5.941 2.996 0.2689 0.0000   5   0 360.3 19.02
x20  23.77   0.001 5.745 2.996 0.3807 0.0000   5   0 292.5 15.63
x428 18.14   0.001 5.523 3.010 0.4511 0.0442   5   1 230.0 12.34
x720 16.91   0.001 6.776 2.996 0.7357 0.0000   5   0 856.7 43.83
x954 16.19   0.001 6.498 2.996 0.7119 0.0000   5   0 644.0 33.20
> # stratified on cluster, using ranks; equal weights
> uus <- permax(exp1,1:5,nperm=5000,cluster=clustind,stratify=TRUE,
+           ranks=TRUE,WHseed=attr(uuc,'seed.end'))
> summary(uus,nl=5,nr=5) 
Call:
permax(data = exp1, ig1 = 1:5, nperm = 5000, ranks = TRUE, WHseed = attr(uuc, 
    "seed.end"), cluster = clustind, stratify = TRUE)
Summary of the Null Permutation Distribution of # Positives:
     nl prop.nl prop.1l   ave.l      nr prop.nr prop.1r   ave.r 
50.0000  0.0008  0.9578  3.9140 50.0000  0.0008  0.8280  2.3910 
     stat p.lower    m1    m2     s1     s2 np1 np2   mdiff    mrat
x6   -2.5  0.1618 3.275 5.965 0.5978 0.8510   2  10  -363.1 0.06789
x149 -2.5  0.1618 2.996 6.805 0.0000 0.7742   0  10  -882.6 0.02216
x197 -2.5  0.1618 3.096 6.220 0.2240 1.3296   1  10  -480.5 0.04398
x266 -2.5  0.1618 2.996 6.027 0.0000 0.6407   0  10  -394.4 0.04826
x296 -2.5  0.1618 3.313 7.053 0.6583 0.7855   2  10 -1129.3 0.02375
     stat p.upper    m1    m2     s1      s2 np1 np2 mdiff  mrat
x996  2.5   0.525 5.566 3.052 0.9216 0.17697   5   1 240.1 12.35
x992  2.5   0.525 6.571 4.055 0.4613 1.01360   5   7 656.5 12.38
x954  2.5   0.525 6.498 2.996 0.7119 0.00000   5   0 644.0 33.20
x928  2.5   0.525 5.360 3.018 0.8712 0.07056   5   1 192.3 10.40
x909  2.5   0.525 5.900 3.115 0.9645 0.34536   5   2 342.3 16.19
> print(attr(uus,'seed.end'))
[1]  7525 23393 29823
> # stratified on cluster, using ranks; average weighted by cluster sizes
> uus <- permax(exp1,1:5,nperm=5000,cluster=clustind,stratify=TRUE,
+            ranks=TRUE,weights=table(clustind),WHseed=attr(uus,'seed.end'))
> summary(uus,nl=5,nr=5) 
Call:
permax(data = exp1, ig1 = 1:5, nperm = 5000, ranks = TRUE, WHseed = attr(uus, 
    "seed.end"), cluster = clustind, stratify = TRUE, weights = table(clustind))
Summary of the Null Permutation Distribution of # Positives:
     nl prop.nl prop.1l   ave.l      nr prop.nr prop.1r   ave.r 
50.0000  0.0010  0.8256  2.1954 50.0000  0.0010  0.9072  3.4114 
      stat p.lower    m1    m2     s1     s2 np1 np2   mdiff    mrat
x6   -40.5  0.1572 3.275 5.965 0.5978 0.8510   2  10  -363.1 0.06789
x149 -40.5  0.1572 2.996 6.805 0.0000 0.7742   0  10  -882.6 0.02216
x197 -40.5  0.1572 3.096 6.220 0.2240 1.3296   1  10  -480.5 0.04398
x266 -40.5  0.1572 2.996 6.027 0.0000 0.6407   0  10  -394.4 0.04826
x296 -40.5  0.1572 3.313 7.053 0.6583 0.7855   2  10 -1129.3 0.02375
     stat p.upper    m1    m2     s1      s2 np1 np2 mdiff  mrat
x996 40.5  0.5376 5.566 3.052 0.9216 0.17697   5   1 240.1 12.35
x992 40.5  0.5376 6.571 4.055 0.4613 1.01360   5   7 656.5 12.38
x954 40.5  0.5376 6.498 2.996 0.7119 0.00000   5   0 644.0 33.20
x928 40.5  0.5376 5.360 3.018 0.8712 0.07056   5   1 192.3 10.40
x909 40.5  0.5376 5.900 3.115 0.9645 0.34536   5   2 342.3 16.19
> print(attr(uus,'seed.start'))
[1]  7525 23393 29823
> print(attr(uus,'seed.end'))
[1] 28723 10857  9189
> summary(uus,nl=10,nr=0) 
Call:
permax(data = exp1, ig1 = 1:5, nperm = 5000, ranks = TRUE, WHseed = attr(uus, 
    "seed.end"), cluster = clustind, stratify = TRUE, weights = table(clustind))
Summary of the Null Permutation Distribution of # Positives:
     nl prop.nl prop.1l   ave.l      nr prop.nr prop.1r   ave.r 
50.0000  0.0010  0.8256  2.1954 50.0000  0.0010  0.9072  3.4114 
      stat p.lower    m1    m2     s1     s2 np1 np2   mdiff    mrat
x6   -40.5  0.1572 3.275 5.965 0.5978 0.8510   2  10  -363.1 0.06789
x149 -40.5  0.1572 2.996 6.805 0.0000 0.7742   0  10  -882.6 0.02216
x197 -40.5  0.1572 3.096 6.220 0.2240 1.3296   1  10  -480.5 0.04398
x266 -40.5  0.1572 2.996 6.027 0.0000 0.6407   0  10  -394.4 0.04826
x296 -40.5  0.1572 3.313 7.053 0.6583 0.7855   2  10 -1129.3 0.02375
x431 -40.5  0.1572 3.139 6.071 0.3210 0.8430   1  10  -409.8 0.05333
x464 -40.5  0.1572 2.996 6.418 0.0000 0.8213   0  10  -592.6 0.03265
x474 -40.5  0.1572 3.263 5.663 0.5970 1.2854   1  10  -262.0 0.09066
x606 -40.5  0.1572 2.996 5.684 0.0000 0.6579   0  10  -274.2 0.06798
x622 -40.5  0.1572 3.346 6.309 0.4796 1.0029   2  10  -521.2 0.05165
NULL
> 
> clust2 <- c(1,1,2,2,2,3,3,4,4,5,5,5,6,6,6)
> uu5 <- permax(exp1,1:5,nperm=5000,cluster=clust2,permute.cluster=TRUE,
+            ranks=TRUE,WHseed=attr(uus,'seed.end'))
> summary(uu5,nl=5,nr=5)
Call:
permax(data = exp1, ig1 = 1:5, nperm = 5000, ranks = TRUE, WHseed = attr(uus, 
    "seed.end"), cluster = clust2, permute.cluster = TRUE)
Summary of the Null Permutation Distribution of # Positives:
     nl prop.nl prop.1l   ave.l      nr prop.nr prop.1r   ave.r 
50.0000  0.0674  0.9326  6.9440 50.0000  0.0674  0.6640  5.4250 
     stat p.lower    m1    m2     s1     s2 np1 np2   mdiff    mrat
x6    -25  0.0674 3.275 5.965 0.5978 0.8510   2  10  -363.1 0.06789
x149  -25  0.0674 2.996 6.805 0.0000 0.7742   0  10  -882.6 0.02216
x197  -25  0.0674 3.096 6.220 0.2240 1.3296   1  10  -480.5 0.04398
x266  -25  0.0674 2.996 6.027 0.0000 0.6407   0  10  -394.4 0.04826
x296  -25  0.0674 3.313 7.053 0.6583 0.7855   2  10 -1129.3 0.02375
     stat p.upper    m1    m2     s1      s2 np1 np2 mdiff  mrat
x996   25  0.3944 5.566 3.052 0.9216 0.17697   5   1 240.1 12.35
x992   25  0.3944 6.571 4.055 0.4613 1.01360   5   7 656.5 12.38
x954   25  0.3944 6.498 2.996 0.7119 0.00000   5   0 644.0 33.20
x928   25  0.3944 5.360 3.018 0.8712 0.07056   5   1 192.3 10.40
x909   25  0.3944 5.900 3.115 0.9645 0.34536   5   2 342.3 16.19
> uu6 <- permax(exp1,1:5,nperm=0,cluster=clust2,permute.cluster=TRUE,ranks=TRUE)
statistics will be computed for all 15 combinations
> print(uu6s <- summary(uu6,nl=5,nr=5))
Call:
permax(data = exp1, ig1 = 1:5, nperm = 0, ranks = TRUE, cluster = clust2, 
    permute.cluster = TRUE)
Summary of the Null Permutation Distribution of # Positives:
         nl     prop.nl     prop.1l       ave.l          nr     prop.nr 
50.00000000  0.06666667  0.93333334  6.80000019 50.00000000  0.06666667 
    prop.1r       ave.r 
 0.66666669  5.26666689 
     stat p.lower    m1    m2     s1     s2 np1 np2   mdiff    mrat
x6    -25 0.06667 3.275 5.965 0.5978 0.8510   2  10  -363.1 0.06789
x149  -25 0.06667 2.996 6.805 0.0000 0.7742   0  10  -882.6 0.02216
x197  -25 0.06667 3.096 6.220 0.2240 1.3296   1  10  -480.5 0.04398
x266  -25 0.06667 2.996 6.027 0.0000 0.6407   0  10  -394.4 0.04826
x296  -25 0.06667 3.313 7.053 0.6583 0.7855   2  10 -1129.3 0.02375
     stat p.upper    m1    m2     s1      s2 np1 np2 mdiff  mrat
x996   25     0.4 5.566 3.052 0.9216 0.17697   5   1 240.1 12.35
x992   25     0.4 6.571 4.055 0.4613 1.01360   5   7 656.5 12.38
x954   25     0.4 6.498 2.996 0.7119 0.00000   5   0 644.0 33.20
x928   25     0.4 5.360 3.018 0.8712 0.07056   5   1 192.3 10.40
x909   25     0.4 5.900 3.115 0.9645 0.34536   5   2 342.3 16.19
> apply(exp1[uu6s$upper,],1,rank)
      x996 x992 x954 x928 x909
 [1,]   15   14 11.0   13 14.0
 [2,]   12   12 15.0   12 11.0
 [3,]   14   13 13.0   15 12.0
 [4,]   11   15 14.0   11 13.0
 [5,]   13   11 12.0   14 15.0
 [6,]   10    6  5.5    5  9.0
 [7,]    5    5  5.5    5  4.5
 [8,]    5   10  5.5    5  4.5
 [9,]    5    4  5.5    5 10.0
[10,]    5    7  5.5    5  4.5
[11,]    5    2  5.5    5  4.5
[12,]    5    8  5.5    5  4.5
[13,]    5    2  5.5   10  4.5
[14,]    5    2  5.5    5  4.5
[15,]    5    9  5.5    5  4.5
> uu6[uu6s$upper,]$pind.upper
[1] 0.06666667 0.06666667 0.06666667 0.06666667 0.06666667
> 
> ucor <- permcor(exp1[,3:8],1:6,nperm=0)
statistics will be computed for all 720 permutations
> print(summary(ucor))
Call:
permcor(data = exp1[, 3:8], phen = 1:6, nperm = 0)
        stat p.lower np
x568 -0.9534  0.4472  4
x664 -0.9488  0.5083  4
x136 -0.9396  0.6208  3
x306 -0.9349  0.6986  5
x538 -0.9349  0.7000  4
x186 -0.9299  0.7681  3
x611 -0.9289  0.7833  3
x858 -0.9287  0.7861  4
x618 -0.9269  0.8111  5
x753 -0.9258  0.8306  5
x713 -0.9209  0.8778  5
x552 -0.9202  0.8861  4
x849 -0.9200  0.8889  4
x27  -0.9156  0.9111  3
x720 -0.9125  0.9194  3
x733 -0.9090  0.9375  4
x771 -0.9089  0.9375  3
x610 -0.9072  0.9458  3
x20  -0.9058  0.9514  3
x801 -0.9054  0.9542  4
x668 -0.9042  0.9583  4
x121 -0.9036  0.9597  3
x144 -0.8999  0.9639  3
x833 -0.8933  0.9792  4
x584 -0.8924  0.9806  3
       stat p.upper np
x143 0.9523  0.4583  5
x225 0.9513  0.4708  4
x725 0.9428  0.5750  5
x762 0.9411  0.5917  4
x589 0.9382  0.6528  3
x884 0.9370  0.6792  3
x570 0.9332  0.7208  3
x987 0.9322  0.7278  3
x878 0.9313  0.7542  4
x474 0.9283  0.7931  3
x266 0.9271  0.8111  3
x189 0.9222  0.8681  3
x809 0.9207  0.8833  3
x234 0.9201  0.8889  4
x15  0.9201  0.8889  3
x464 0.9035  0.9597  3
x634 0.8958  0.9778  4
x604 0.8943  0.9778  4
x876 0.8942  0.9778  4
x874 0.8941  0.9778  4
x653 0.8830  0.9889  5
x606 0.8825  0.9889  3
x870 0.8813  0.9903  3
x852 0.8778  0.9931  4
x511 0.8751  0.9944  3
> ucor <- permcor(exp1,1:15,WHseed=attr(uus,'seed.end'))
> print(summary(ucor))
Call:
permcor(data = exp1, phen = 1:15, WHseed = attr(uus, "seed.end"))
        stat p.lower np
x560 -0.8757   0.005  8
x834 -0.8545   0.017 11
x664 -0.8423   0.032  6
x424 -0.8338   0.050  6
x833 -0.8337   0.050  7
x996 -0.8294   0.064  6
x568 -0.8287   0.066  8
x183 -0.8195   0.087  9
x585 -0.8039   0.128  8
x123 -0.8028   0.131  5
x705 -0.7999   0.134  6
x20  -0.7984   0.138  5
x720 -0.7962   0.146  5
x954 -0.7943   0.153  5
x27  -0.7939   0.154  5
x107 -0.7909   0.164  8
x428 -0.7885   0.172  6
x238 -0.7869   0.181  7
x610 -0.7799   0.211  6
x148 -0.7796   0.214  7
x863 -0.7752   0.232  9
x804 -0.7744   0.235  7
x618 -0.7686   0.274  8
x136 -0.7645   0.297  5
x49  -0.7590   0.336  7
       stat p.upper np
x762 0.8446   0.026 13
x304 0.8343   0.045  9
x266 0.8004   0.129 10
x606 0.7972   0.138 10
x296 0.7882   0.172 12
x504 0.7652   0.272 11
x160 0.7646   0.275 12
x786 0.7584   0.322  9
x197 0.7569   0.329 11
x937 0.7495   0.378  7
x39  0.7300   0.489  9
x364 0.7248   0.528 11
x439 0.7186   0.574 10
x464 0.7116   0.619 10
x187 0.7114   0.621 15
x798 0.7056   0.648 10
x149 0.7005   0.682 10
x246 0.6934   0.722  9
x725 0.6879   0.771 13
x764 0.6806   0.804  8
x589 0.6801   0.805  9
x875 0.6796   0.809 10
x624 0.6723   0.840 10
x990 0.6694   0.855  9
x646 0.6610   0.888  6
> print(attr(ucor,'seed.end'))
[1]  1505 12564  1498
> 
> ucorx <- permcor(exp1[,4:7],1:4,nperm=0)
statistics will be computed for all 24 permutations
> summary(ucorx,nl=5,nr=5)
Call:
permcor(data = exp1[, 4:7], phen = 1:4, nperm = 0)
        stat p.lower np
x550 -0.9997 0.04167  3
x889 -0.9988 0.08333  4
x491 -0.9967 0.20833  3
x91  -0.9963 0.33333  3
x444 -0.9937 0.45833  3
       stat p.upper np
x959 0.9963  0.3750  3
x567 0.9905  0.5833  4
x721 0.9772  0.9167  3
x128 0.9722  0.9167  3
x671 0.9684  0.9583  3
> ucorx <- permcor(exp1[,4:7],1:4,nperm=0,cluster=c(1,2,1,2))
statistics will be computed for all 4 permutations
> summary(ucorx,nl=5,nr=5)
Call:
permcor(data = exp1[, 4:7], phen = 1:4, nperm = 0, cluster = c(1, 
    2, 1, 2))
        stat p.lower np
x550 -0.9997    0.25  3
x889 -0.9988    0.50  4
x491 -0.9967    0.50  3
x91  -0.9963    0.75  3
x444 -0.9937    0.75  3
       stat p.upper np
x959 0.9963    0.75  3
x567 0.9905    0.75  4
x721 0.9772    1.00  3
x128 0.9722    1.00  3
x671 0.9684    1.00  3
> ucorx <- permcor(exp1[,3:9],1:7,nperm=0,cluster=c(1,2,3,1,2,3,3))
statistics will be computed for all 24 permutations
> summary(ucorx,nl=5,nr=5)
Call:
permcor(data = exp1[, 3:9], phen = 1:7, nperm = 0, cluster = c(1, 
    2, 3, 1, 2, 3, 3))
        stat p.lower np
x753 -0.9487  0.2917  5
x568 -0.9421  0.2917  4
x538 -0.9253  0.4167  4
x664 -0.9228  0.5000  4
x858 -0.9181  0.6250  4
       stat p.upper np
x143 0.9508 0.08333  6
x762 0.9457 0.20833  5
x604 0.9347 0.29167  5
x852 0.9224 0.37500  5
x634 0.9174 0.41667  5
> ucorx <- permcor(exp1[,3:9],1:7,nperm=10,cluster=c(1,2,3,1,2,3,3),WHseed=attr(uus,'seed.end'))
> summary(ucorx,nl=5,nr=5)
Call:
permcor(data = exp1[, 3:9], phen = 1:7, nperm = 10, WHseed = attr(uus, 
    "seed.end"), cluster = c(1, 2, 3, 1, 2, 3, 3))
        stat p.lower np
x753 -0.9487     0.5  5
x568 -0.9421     0.5  4
x538 -0.9253     0.5  4
x664 -0.9228     0.6  4
x858 -0.9181     0.6  4
       stat p.upper np
x143 0.9508     0.0  6
x762 0.9457     0.1  5
x604 0.9347     0.3  5
x852 0.9224     0.4  5
x634 0.9174     0.4  5
> ucorx <- permcor(exp1[,3:10],c(1,2,2,3,3,4,4,4),nperm=10,cluster=c(1,2,2,3,3,4,4,4),permute.cluster=TRUE,WHseed=attr(uus,'seed.end'))
> summary(ucorx,nl=5,nr=5)
Call:
permcor(data = exp1[, 3:10], phen = c(1, 2, 2, 3, 3, 4, 4, 4), 
    nperm = 10, WHseed = attr(uus, "seed.end"), cluster = c(1, 
        2, 2, 3, 3, 4, 4, 4), permute.cluster = TRUE)
        stat p.lower np
x801 -0.9501     0.1  4
x664 -0.9498     0.1  4
x668 -0.9366     0.4  4
x996 -0.9296     0.5  4
x733 -0.9295     0.5  4
       stat p.upper np
x762 0.9442     0.1  6
x725 0.9428     0.1  7
x809 0.9351     0.2  5
x874 0.9291     0.3  6
x108 0.9221     0.4  5
> ucorx <- permcor(exp1[,3:10],c(1,2,2,3,3,4,4,4),nperm=0,cluster=c(1,2,2,3,3,4,4,4),permute.cluster=TRUE)
statistics will be computed for all 24 permutations
> summary(ucorx,nl=5,nr=5)
Call:
permcor(data = exp1[, 3:10], phen = c(1, 2, 2, 3, 3, 4, 4, 4), 
    nperm = 0, cluster = c(1, 2, 2, 3, 3, 4, 4, 4), permute.cluster = TRUE)
        stat p.lower np
x801 -0.9501  0.1667  4
x664 -0.9498  0.1667  4
x668 -0.9366  0.3750  4
x996 -0.9296  0.4167  4
x733 -0.9295  0.4167  4
       stat p.upper np
x762 0.9442  0.2083  6
x725 0.9428  0.2083  7
x809 0.9351  0.3750  5
x874 0.9291  0.4167  6
x108 0.9221  0.5000  5
> 
> 
> postscript(file='figs2.ps')
> par(cex=.7,mar=c(6,6,2,2))
> plot(ucor,exp1) #columns of exp1 already sorted on Z
> dev.off()
null device 
          1 
> 
> u8 <- permcor(exp1,1:15,cluster=clustind,WHseed=attr(ucor,'seed.end'))
> summary(u8,nr=4,nl=4)
Call:
permcor(data = exp1, phen = 1:15, WHseed = attr(ucor, "seed.end"), 
    cluster = clustind)
        stat p.lower np
x560 -0.8757   0.003  8
x834 -0.8545   0.011 11
x664 -0.8423   0.021  6
x424 -0.8338   0.029  6
       stat p.upper np
x762 0.8446   0.018 13
x304 0.8343   0.034  9
x266 0.8004   0.087 10
x606 0.7972   0.098 10
> # correlations estimated within clusters; average weighted by cluster sizes
> u8 <- permcor(exp1,1:15,cluster=clustind,stratify=TRUE,
+               weights=table(clustind),WHseed=attr(u8,'seed.end'))
> summary(u8,nr=4,nl=4)
Call:
permcor(data = exp1, phen = 1:15, WHseed = attr(u8, "seed.end"), 
    cluster = clustind, stratify = TRUE, weights = table(clustind))
        stat p.lower np
x20  -0.9688   0.001  5
x123 -0.9668   0.001  5
x616 -0.9614   0.005  6
x584 -0.9604   0.007  5
       stat p.upper np
x762 0.9565   0.004 13
x606 0.9286   0.008 10
x149 0.9113   0.016 10
x266 0.9057   0.021 10
> 
> # should give same p-values:
> u1 <- permax(exp1[,c(1:3,5:8)],1:3)
statistics will be computed for all 35 combinations
> u2 <- permcor(exp1[,c(1:3,5:8)],c(1,1,1,0,0,0,0),nperm=0)
statistics will be computed for all 5040 permutations
> print(range(u1$p.lower-u2$p.lower))
[1] 0 0
> print(range(u1$p.upper-u2$p.upper))
[1] 0 0
> 
> uuu <- permsep(exp1,1:5)
statistics will be computed for all 3003 combinations
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.0003330003 
average # per permutation: 0.3556444 
proportion of permutations with any: 0.2587413 
> print(uuu$dtcs)
        obs.num         pval.no avenum.per.perm   prop.with.any 
   4.600000e+01    3.330003e-04    3.556444e-01    2.587413e-01 
> uuu <- permsep(exp2,c(1,2,5,9,15))
statistics will be computed for all 3003 combinations
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.0003330003 
average # per permutation: 0.3556444 
proportion of permutations with any: 0.2587413 
> uuu <- permsep(exp3,2:6,ig2=7:16)
statistics will be computed for all 3003 combinations
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.0003330003 
average # per permutation: 0.3556444 
proportion of permutations with any: 0.2587413 
> uuu <- permsep(exp4,c(1,2,5,9,15)+1,ig2=c(4,5,7,8,9,11,12,13,14,15))
statistics will be computed for all 3003 combinations
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.0003330003 
average # per permutation: 0.3556444 
proportion of permutations with any: 0.2587413 
> uuu <- permsep(exp1,1:5,nperm=1000)
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0 
average # per permutation: 0.37 
proportion of permutations with any: 0.274 
> print(attr(uuu,'seed.start'))
[1]  6278 11005 17106
> print(attr(uuu,'seed.end'))
[1] 11188  5347  1405
> u5 <- permsep(exp1,ig1=1:5,nperm=1000,WHseed=attr(uuu,'seed.end'))
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0 
average # per permutation: 0.332 
proportion of permutations with any: 0.264 
> print(attr(u5,'seed.start'))
[1] 11188  5347  1405
> print(attr(u5,'seed.end'))
[1] 11057 15949 15050
> uuu <- permsep(exp1,1:5,cluster=clustind,nperm=10000,WHseed=attr(u5,'seed.end'))
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.0013 
average # per permutation: 0.4152 
proportion of permutations with any: 0.2645 
> uuu <- permsep(exp1,1:5,nperm=2000,cluster=clustind,stratify=TRUE,
+           WHseed=attr(uuu,'seed.end'))
# attributes with complete separation: 57 
proportion of permutations with as many or more (p-value): 5e-04 
average # per permutation: 1.1605 
proportion of permutations with any: 0.5945 
> uuu <- permsep(exp1,1:5,cluster=clust2,nperm=1000,WHseed=attr(uuu,'seed.end'),permute.cluster=TRUE)
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.061 
average # per permutation: 3.464 
proportion of permutations with any: 0.473 
> uuu <- permsep(exp1,1:5,cluster=clust2,nperm=0,permute.cluster=TRUE)
statistics will be computed for all 15 combinations
# attributes with complete separation: 46 
proportion of permutations with as many or more (p-value): 0.06666667 
average # per permutation: 3.733333 
proportion of permutations with any: 0.4666667 
> 
> x <- matrix(c(1:10,NA,NA),4,dimnames=list(format(1:4),c('a','b','c')))
> impmv(x)
  a b  c
1 1 5  9
2 2 6 10
3 3 7  5
4 4 8  6
> na.omit(impmv(x,min.nonmiss=3))
  a b  c
1 1 5  9
2 2 6 10
attr(,"na.action")
3 4 
3 4 
attr(,"na.action")attr(,"class")
[1] "omit"
> irn <- function(x,nc) rnorm(nc-length(x),mean(x),sqrt(var(x)))
> impmv(x,IFUN=irn,nc=ncol(x)) 
  a b         c
1 1 5  9.000000
2 2 6 10.000000
3 3 7  2.604817
4 4 8 11.139261
> impmv(t(x),IFUN=irn,nc=nrow(x)) 
  1  2        3        4
a 1  2  3.00000  4.00000
b 5  6  7.00000  8.00000
c 9 10 10.00994 11.11366
> 
> x <- matrix(1:12,3)
> rowperm(x)
     [,1] [,2] [,3] [,4]
[1,]    1   10    7    4
[2,]   11    8    2    5
[3,]   12    6    3    9
> 
> # paired data -- checked the p-values and stats by hand
> clust <- c(1,2,3,4,1,2,3,4)
> dat <- rbind(c(1:8),c(8,1:7),c(5,1:7),c(8,7,1:6))
> dimnames(dat) <- list(1:4,1:8)
> permax(dat,1:4,cluster=clust,signed.rank=TRUE)
statistics will be computed for all 16 combinations
  stat pind.lower pind.upper p.lower p.upper        m1       m2        s1
1  -10     0.0625     1.0000  0.1875       1 0.7945135 1.856637 0.6011676
2   -8     0.1250     0.9375  0.1875       1 0.9678003 1.683350 0.8688939
3   -8     0.1250     0.9375  0.1875       1 0.8502993 1.683350 0.6796216
4   -4     0.3125     0.8125  0.3125       1 1.1796247 1.471526 1.0041644
         s2 np1 np2     mdiff      mrat
1 0.2024253   3   4 -4.188808 0.3457208
2 0.2411054   3   4 -2.751415 0.4889230
3 0.2411054   3   4 -3.043216 0.4347209
4 0.2988301   3   4 -1.102724 0.7468423
> # note, order of the rows is flipped in the output of the following call
> permax(dat,5:8,cluster=clust,signed.rank=TRUE)
statistics will be computed for all 16 combinations
  stat pind.lower pind.upper p.lower p.upper       m1        m2        s1
4    4     0.8125     0.3125       1  0.3125 1.471526 1.1796247 0.2988301
2    8     0.9375     0.1250       1  0.1875 1.683350 0.9678003 0.2411054
3    8     0.9375     0.1250       1  0.1875 1.683350 0.8502993 0.2411054
1   10     1.0000     0.0625       1  0.1875 1.856637 0.7945135 0.2024253
         s2 np1 np2    mdiff     mrat
4 1.0041644   4   3 1.102724 1.338971
2 0.8688939   4   3 2.751415 2.045312
3 0.6796216   4   3 3.043216 2.300327
1 0.6011676   4   3 4.188808 2.892508
> 
